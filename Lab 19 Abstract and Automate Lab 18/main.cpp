#include <iostream>
#include <string> 
#include "LinkedList.h" // personal linked list I created
#include <fstream> // for file input
#include <random> 
#include <cmath>
#include <vector>

using namespace std;

// COMSC-210 | Lab 19: Abstract & Automate Lab 18 | Erick Pascual-Bautista

float generateRandomRating();



struct Movie {
    string title;
    LinkedList<float> ratings;
    LinkedList<string> comments;

    Movie() {
        title = "";
    }

    Movie(string title) {
        this->title = title;
    }
    void addComment(string comment) { // Adds a comment (every time comment is added random rating is added with the comment )
        comments.pushFront(comment);
        ratings.pushFront(generateRandomRating());
    }
};

void printMovieDetails(vector<Movie>&);

int main() {

    // Creating Movie objects
    Movie interstellar("Interstellar");
    Movie inception("Inception");

    // creates a vector of movies
    vector<Movie> movies(2);
    movies.push_back(interstellar);
    movies.push_back(inception);

    // Opening comments file
    ifstream file;
    file.open("Movie-One-Comments.txt");
    if (!file.good()) {
        cout << "File not found" << endl;
        return 0; // returns if file wasn't found 
    }
    

    string line;

    // Note each time a comment is added so should a review 
        // said review should be random generated by calling generateRandomRating

    while (getline(file, line)) { // as long as there is a next line to get
        if (!line.empty()) { // if line is not empty
            movies[0].addComment(line);
        }
    }


    file.close(); // closes file after reading everything

    file.open("Movie-One-Comments.txt");
    if(!file.good()) {
        cout << "File not found" << endl;
        return 0; // returns if file wasn't found 
    }

    while (getline(file, line)) {
        if(!line.empty()) {
            movies[1].comments.pushFront("line");
        }
    }

    file.close();

    printMovieDetails(movies);

    return 0;
}

float generateRandomRating() {
    random_device rd;
    float randomFloat = static_cast<float>(rd()) / rd.max() * 5.0f; // generates random number between 0-5 
    randomFloat = round(randomFloat * 10.0f) / 10.0f; // rounds to the nearest tenth
    return randomFloat;
}

void printMovieDetails(vector<Movie>& movies) {
    for (int i = 0; i < movies.size(); i++) {
        cout << "Movie title: " << movies[i].title << endl;
        cout << "\tComments: ";
        while (!movies[i].comments.isEmpty()) { // as long as linked list isn't empty 
            cout << movies[i].comments.peek() << endl;
            movies[i].comments.pop();
        }
        cout << endl << "Ratings: ";

        while (!movies[i].ratings.isEmpty()) { // as long as linked list isn't empty
            cout << movies[i].ratings.peek() << endl;
            movies[i].ratings.pop();
        }
        cout << endl;
    }
} 